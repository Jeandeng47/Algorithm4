public class P_1_3_46 {
    // Forbidden triple for stack generability:
    // A permutation can be generated by a stack if and only if
    // it has no forbidden triple. A forbidden triple is a sequence 
    // of three integers (a, b, c) such that a < b < c with c first, 
    // a second, and b third （a -> c -> b）

    public static boolean hasForbiddenTriple(int[] permutation) {
        int n = permutation.length;
        for (int i = 0; i < n; i++) { // c
            for (int j = i + 1; j < n; j++) { // a
                if (permutation[j] >= permutation[i]) { 
                    continue; // a must be less than c
                }
                for (int k = j + 1; k < n; k++) { // b
                    // b < c and b > a
                    if (permutation[k] > permutation[j] &&
                        permutation[k] < permutation[i]) {
                            return true;
                    }
                }
            }
        }
        return false;

    }

    public static void main(String[] args) {

        int[] p1 = {2, 1, 0, 3};
        System.out.println("Has forbidden triple ? " + hasForbiddenTriple(p1)); // false, valid permutation

        int[] p2 = {2, 0, 1, 3};
        System.out.println("Has forbidden triple ? " + hasForbiddenTriple(p2)); // true, invalid permutation

    }
}
